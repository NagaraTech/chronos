// This file is @generated by prost-build.
/// type = Z_TYPE_GATEWAY
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ZGateway {
    #[prost(enumeration = "GatewayType", tag = "1")]
    pub r#type: i32,
    #[prost(bytes = "vec", tag = "2")]
    pub data: ::prost::alloc::vec::Vec<u8>,
}
/// type = TYPE_CLOCK_NODE
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClockNode {
    #[prost(message, optional, tag = "1")]
    pub clock: ::core::option::Option<super::vlc::Clock>,
    #[prost(bytes = "vec", tag = "2")]
    pub id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "3")]
    pub message_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag = "4")]
    pub count: u64,
    #[prost(uint64, tag = "5")]
    pub create_at: u64,
    #[prost(bytes = "vec", tag = "6")]
    pub raw_message: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NodeInfo {
    #[prost(string, repeated, tag = "1")]
    pub node_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum GatewayType {
    TypeClockNode = 0,
    /// ref merge log
    TypeMergeLog = 1,
    /// heartbeat or node info
    TypeNodeInfo = 2,
}
impl GatewayType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            GatewayType::TypeClockNode => "TYPE_CLOCK_NODE",
            GatewayType::TypeMergeLog => "TYPE_MERGE_LOG",
            GatewayType::TypeNodeInfo => "TYPE_NODE_INFO",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TYPE_CLOCK_NODE" => Some(Self::TypeClockNode),
            "TYPE_MERGE_LOG" => Some(Self::TypeMergeLog),
            "TYPE_NODE_INFO" => Some(Self::TypeNodeInfo),
            _ => None,
        }
    }
}
